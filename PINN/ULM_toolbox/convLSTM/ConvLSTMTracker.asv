classdef ConvLSTMTracker < handle
    properties
        input_size = [128, 128, 1]   % 输入尺寸 [H,W,C]
        lstm_hidden_units = 64       % LSTM隐藏单元
        net                          % 训练好的网络
    end
    
    methods
        function obj = ConvLSTMTracker(img_size)
            if nargin > 0
                obj.input_size = [img_size, 1];
            end
            obj.build_network();
        end
        
        function heatmap_seq = coords_to_heatmap(obj, coords_seq)
            num_frames = numel(coords_seq);
            heatmap_seq = zeros([obj.input_size(1:2), num_frames]);
            
            for t = 1:num_frames
                coords = coords_seq{t};
                heatmap = zeros(obj.input_size(1:2));
                
                % 坐标映射
                valid = coords(:,1)>=1 & coords(:,1)<=obj.input_size(2) & ...
                        coords(:,2)>=1 & coords(:,2)<=obj.input_size(1);
                coords = round(coords(valid, :));
                
                % 生成热力图
                for k = 1:size(coords,1)
                    x = coords(k,1);
                    y = coords(k,2);
                    heatmap(y,x) = 1;
                end
                
                % 高斯平滑
                heatmap_seq(:,:,t) = imgaussfilt(heatmap, 1.5);
            end
            heatmap_seq = reshape(heatmap_seq, [obj.input_size(1:2), 1, num_frames]);
        end
        
    function build_network(obj)
           layers = [
       sequenceInputLayer(obj.input_size, 'Name', 'input')  % 输入尺寸 [H, W, C]
        
        sequenceFoldingLayer('Name', 'fold')  % 将序列展开
        
        convolution2dLayer(3, 32, 'Padding','same', 'Name', 'conv1')
        batchNormalizationLayer('Name', 'bn1')
        reluLayer('Name', 'relu1')
        
        sequenceUnfoldingLayer('Name', 'unfold')
        
        flattenLayer('Name', 'flatten')
        
        lstmLayer(obj.lstm_hidden_units, 'OutputMode','sequence', 'Name', 'lstm')
        
        fullyConnectedLayer(prod(obj.input_size(1:2))*2)  % 输出尺寸匹配位移场
        reshapeLayer([obj.input_size(1:2) 2])  % 重塑为位移场形状
        
        regressionLayer('Name', 'output')
  
    ];
    
    % 连接层结构
    lgraph = layerGraph(layers);
    lgraph = connectLayers(lgraph, 'fold/miniBatchSize', 'unfold/miniBatchSize');
    
    obj.net = lgraph;

    
         options = trainingOptions('sgdm', ...
        'MaxEpochs', 20, ...
        'Plots','training-progress');
    
            obj.net = trainNetwork([], layers, options);
        end
        
        function disp_fields = predict_disp(obj, heatmap_seq)
            input_data = heatmap_seq;
            pred = predict(obj.net, input_data);
            disp_fields = squeeze(pred);
        end
        
        function Tracks = track(obj, coords_seq)
            heatmap_seq = obj.coords_to_heatmap(coords_seq);
            disp_fields = obj.predict_disp(heatmap_seq);
            Tracks = obj.generate_tracks(coords_seq, disp_fields);
        end
        
        function Tracks = generate_tracks(obj, coords_seq, disp_fields)
            Tracks = cell(1000,1);
            current_id = 1;
            
            % 初始化首帧
            first_coords = coords_seq{1};
            for k = 1:size(first_coords,1)
                Tracks{current_id} = [1, first_coords(k,:)];
                current_id = current_id + 1;
            end
            
            % 逐帧更新
            for t = 1:size(disp_fields,4)-1
                current_disp = disp_fields(:,:,:,t);
                
                for track_id = 1:current_id-1
                    if size(Tracks{track_id},1) == t
                        last_pos = Tracks{track_id}(end,2:3);
                        
                        % 从位移场获取预测位移
                        dx = current_disp(round(last_pos(2)), round(last_pos(1)), 1);
                        dy = current_disp(round(last_pos(2)), round(last_pos(1)), 2);
                        
                        new_pos = last_pos + [dx, dy];
                        Tracks{track_id} = [Tracks{track_id}; t+1, new_pos];
                    end
                end
            end
            
            % 过滤短轨迹
            Tracks = Tracks(~cellfun('isempty',Tracks));
            track_lens = cellfun(@(x) size(x,1), Tracks);
            Tracks = Tracks(track_lens >= 5);
        end
    end
end
